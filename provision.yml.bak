# ansible-playbook ./setup.yml  -v -vvvv -u ubuntu -i ./host.yml 
# cd /vagrant && ansible-playbook /vagrant/provision.yml  -vvv -i /vagrant/inventory.txt  -l nodes
---
- name: VM Centos de test
  hosts: [all]
  become: yes
  user: vagrant
  vars:
    wildfly_version: "10.1.0.Final"
    new_user_name: postgres
    user_password: postgres

  environment:

  tasks:
 
# =================================================
# Centos 7 configuration de base
# =================================================
  - name: Doit être CentOS7
    fail: msg="===>> Only on CentOS 7, derivatives, and later ! <<==="
    when: (ansible_distribution != "CentOS" and ansible_distribution != 'Red Hat Enterprise Linux') or (ansible_distribution_major_version != "7")
  - name: Ecriture du fichier /etc/resolv.conf
    template: src=/vagrant/resolv.conf.j2 dest=/etc/resolv.conf mode=644 owner=root group=root        
  - name: Yum update standard repo
    yum: name=* state=latest update_cache=yes
  - name: Installation des packages
    yum: name={{ item }} state=present update_cache=yes
    with_items:
      - rng-tools
      - vim
      - lsof
      - lynx
      - nmap
      - bind-utils
      - dos2unix
      - sshpass
      - cockpit
      - cockpit-dashboard
  - name: Mise en forme unix des script
    lineinfile:
      path: /usr/lib/systemd/system/rngd.service
      regexp: '^ExecStart=/sbin/rngd -f'
      line: 'ExecStart=/sbin/rngd -f -r /dev/urandom -o /dev/random'
  - name: Démarrage du service rngd sur la vm pour rendre actif le générateur aléatoire.
    systemd:
      state: started
      daemon_reload: yes
      enabled: yes
      name: rngd
  - name: Démarrage du service cockpit.
    systemd:
      state: started
      daemon_reload: yes
      enabled: yes
      name: cockpit
  - name: Mise en forme unix des script
    shell: dos2unix /vagrant/*.sh
#  - name: Déactivation de l'IPv6 avec /etc/sysctl.conf
#    sysctl:
#      name: net.ipv6.conf.all.disable_ipv6
#      value: 1
#      sysctl_set: yes
#      state: present
  - name: Ensure NetworkManager does not change /etc/resolf.conf
    ini_file:
      path: /etc/NetworkManager/NetworkManager.conf
      section: main
      option: dns
      value: none
      backup: yes
  - name: Desactivation de IPV6
    shell: /vagrant/disable-ipv6.sh
  - name: Mise en forme unix des script
    shell: dos2unix /vagrant/*.sh
# =================================================
# Java 8 + Wildfly
# =================================================
  - name: Install Java 1.8 and some basic dependencies
    yum: name={{item}} state=present
    with_items:
     - unzip
     - java-1.8.0-openjdk
     - java-1.8.0-openjdk-devel
  - name: Download JBoss from jboss.org
    get_url: url=http://download.jboss.org/wildfly/{{ wildfly_version }}/wildfly-{{ wildfly_version }}.tar.gz dest=/tmp/wildfly-{{ wildfly_version }}.tar.gz
  - name: Extract archive
    command: /usr/bin/tar -xvf /tmp/wildfly-{{ wildfly_version }}.tar.gz -C /opt/
    args:
      chdir: /opt
      creates: /opt/wildfly-{{ wildfly_version }}
  - name: Creation de l'utilisation wildfly
    user: name=wildfly shell=/usr/sbin/nologin comment="Compte applicatif wildfly"
  - name: Mise en place des owner
    file: path=/opt/wildfly-{{ wildfly_version }} state=directory owner=wildfly group=wildfly recurse=yes
  - name: Création du lien
    file: src=/opt/wildfly-{{ wildfly_version }} path=/opt/wildfly owner=wildfly group=wildfly state=link
  - name: Création du répertoire de configuration de wildfly
    file: path=/etc/wildfly state=directory mode=0755 owner=root group=root
  - name: Création du répertoire du PID de wildfly
    file: path=/var/run/wildfly state=directory owner=wildfly group=wildfly recurse=yes
  - name: Création du fichier de configuration de wildfly dans /etc
    copy: src=/opt/wildfly/docs/contrib/scripts/systemd/wildfly.conf dest=/etc/wildfly owner=root group=root remote_src=True
  - name: Mise en place de wildfly en tant que service dans systemd
    copy: src=/opt/wildfly/docs/contrib/scripts/systemd/wildfly.service dest=/etc/systemd/system owner=root group=root remote_src=True
  - name: Wildfly Management sur toutes les cartes réseaux
    ini_file:
      path: /etc/systemd/system/wildfly.service
      section: Service
      option: ExecStart
      value: /opt/wildfly/bin/launch.sh $WILDFLY_MODE $WILDFLY_CONFIG $WILDFLY_BIND -bmanagement=0.0.0.0
      mode: 0644
      backup: yes
  - name: Mise en place du lanceur de wildfly pour le service systemd
    copy: src=/opt/wildfly/docs/contrib/scripts/systemd/launch.sh dest=/opt/wildfly/bin owner=wildfly group=wildfly mode=0755 remote_src=True
  - name: Modification du laucher pour prendre en compte le management
    shell: sudo -u wildfly sed -i -e "s/$WILDFLY_HOME\/bin\/standalone.sh -c \$2 -b \$3/$WILDFLY_HOME\/bin\/standalone.sh \$4 -c \$2 -b \$3/g" /opt/wildfly/bin/launch.sh
  - name: Registration du service wildfly
    systemd:
      name: wildfly
      state: restarted
      daemon_reload: yes
      enabled: yes
  - name: Generate admin access with password admin1
    shell: sudo -u wildfly /opt/wildfly/bin/add-user.sh admin admin1
# =================================================
# PostgreSQL + pdadmin
# =================================================
  - name: install repo for PostgreSQL 10.10.2
    yum:
      name: https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
      state: present
  - name: Install postgresql 10.10.2
    yum: name={{item}} state=present
    with_items:
     - postgresql10
     - postgresql10-server
     - postgresql10-contrib
     - pg_repack10
     - pgadmin4
     - expect
  - name: Generate encrypted password
    shell: python -c 'import crypt; print(crypt.crypt("{{ user_password }}", crypt.mksalt(crypt.METHOD_SHA512)))'
    register: encrypted_user_password
  - name: User todo
    debug: msg="Password for '{{ new_user_name }}' is '{{ user_password }}' => {{ encrypted_user_password.stdout }}"
  - name: Create user account
    user: name={{ new_user_name }}
          password={{ encrypted_user_password.stdout }}
          state=present
          append=yes
          shell="/bin/bash"
          update_password=always
    # when: new_user_name is defined and new_user_name in uids
    register: user_created
  - name: User created
    debug: msg="Password for {{ new_user_name }} is {{ encrypted_user_password.stdout }}"
    when: user_created.changed
  - name: initdb PostgreSQL 10
    shell: sudo /usr/pgsql-10/bin/postgresql-10-setup initdb
    ignore_errors: yes
  - name: Wildfly Management sur toutes les cartes réseaux
    ini_file:
      path: /var/lib/pgsql/10/data/postgresql.conf
      section: null
      option: listen_addresses
      value: "'*'"
      mode: 0600
      backup: yes
      owner: postgres
  - name: Démarrage du service postgresql 10.10.2.
    systemd:
      state: started
      daemon_reload: yes
      enabled: yes
      name: postgresql-10
  - name: Generate encrypted password
    shell: sudo /vagrant/setup-pgadmin4.sh
    # sudo -u postgres /usr/pgsql-10/bin/psql -c "ALTER USER \"postgres\" WITH PASSWORD 'postgres'"
    # sudo -u postgres /usr/pgsql-10/bin/psql -c "ALTER USER \"postgres\" WITH ENCRYPTED PASSWORD '6edef2d746f2274cab951a452d5fc13d'"
  - name: Modification du mot de passe de postgres dans la base
    become: yes
    become_user: postgres
    postgresql_user:
      name: "postgres"
      # echo "postgres" | md5sum
      password: "postgres"
      encrypted: yes
  - name: Modification de /var/lib/pgsql/10/data/pg_hba.conf
    lineinfile:
      path: /var/lib/pgsql/10/data/pg_hba.conf
      regexp: 'host\s+all\s+all\s+192.168.56.0/24\s+md5'
      insertafter: '^#\sIPv4\slocal.+'
      line: "host    all             all             192.168.56.0/24         md5"
  - name: Dernier démarrage du service postgresql 10.10.2.
    systemd:
      state: restarted
      name: postgresql-10
# =================================================
# Wildfly + PostgreSQL
# =================================================
  - name: ajout du driver jdbc postgresql dans wildfly
    shell: /vagrant/wildfly_add_driver.sh
